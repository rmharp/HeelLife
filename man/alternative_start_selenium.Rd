% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scripting_functions.R
\name{alternative_start_selenium}
\alias{alternative_start_selenium}
\title{Scrape UNC Chapel Hill Student Organization Contacts}
\usage{
alternative_start_selenium(port = NULL, verbose = FALSE)
}
\arguments{
\item{port}{The port to use for the Selenium server}

\item{verbose}{Whether to show verbose output}

\item{username}{Your UNC ONYEN (username).}

\item{password}{Your UNC password associated with the ONYEN.}

\item{output_file}{The path to save the output CSV file. Defaults to 
"unc_contacts.csv" in the current working directory.}
}
\value{
A data frame (`tibble`) containing the scraped contact information with
  columns: `Organization`, `Position`, `Name`, and `Email`. The function also
  writes this data frame to a CSV file specified by `output_file`.

A list containing the server and client objects

A list containing the server and client objects
}
\description{
This function orchestrates the web scraping process for the UNC 'Heel Life'.
website. It requires user credentials and interactive MFA input. It automates
logging in, loading all organization pages, and then iterating through each
organization to scrape contact information for its members.
}
\details{
The function requires Firefox to be installed on the user's system as it uses.
the 'firefox' driver for `RSelenium`. The process is interactive because it
prompts the user to enter a Multi-Factor Authentication (MFA) code sent via text.

The scraping process involves.
1.  Starting a Selenium server and Firefox browser.
2.  Navigating to the Heel Life login page.
3.  Submitting user credentials.
4.  Prompting for and submitting the MFA code.
5.  Navigating to the organizations page and loading all results.
6.  Iterating through each organization's page to scrape member details.
7.  Closing the browser and stopping the Selenium server upon completion.
}
\examples{
\dontrun{
# This example is not run automatically because it requires credentials
# and interactive MFA input.

# Load environment variables from a .env file
# The .env file should contain:
# ONYEN_USERNAME="your_onyen"
# ONYEN_PASSWORD="your_password"
dotenv::load_dot_env()

my_username <- Sys.getenv("ONYEN_USERNAME")
my_password <- Sys.getenv("ONYEN_PASSWORD")

if (nzchar(my_username) && nzchar(my_password)) {
  contacts_df <- get_unc_contacts(
    username = my_username,
    password = my_password,
    output_file = "heellife_contacts.csv"
  )
  print(head(contacts_df))
} else {
  message("Please set ONYEN_USERNAME and ONYEN_PASSWORD in your environment.")
}
}
Safely start RSelenium with Firefox, avoiding PhantomJS dependencies

This function starts RSelenium with Firefox while explicitly avoiding.
any PhantomJS driver downloads that can cause connection errors.

}
